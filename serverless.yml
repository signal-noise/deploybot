service: deploybot

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  stage: dev
  region: eu-west-2
  runtime: python2.7
  environment:
    DYNAMODB_TABLE_PROJECT: ${self:service}-project-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_USER: ${self:service}-user-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_BUILD: ${self:service}-build-${opt:stage, self:provider.stage}
    SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}
    SLACK_CHANNEL: ${env:SLACK_CHANNEL}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_TEAM_ID: ${env:SLACK_TEAM_ID}
    GITHUB_APP_PK: ${env:GITHUB_APP_PK}
    GITHUB_APP_ID: ${env:GITHUB_APP_ID}
    GITHUB_APP_INSTALLATIONID: ${env:GITHUB_APP_INSTALLATIONID}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PROJECT}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_BUILD}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

functions:
  slack_command:
    handler: slack/command.receive
    events:
      - http:
          path: slack/command
          method: post
          cors: true
  slack_interactive:
    handler: slack/interactive.receive
    events:
      - http:
          path: slack/interactive
          method: post
          cors: true
  slack_message:
    handler: slack/message.send
    # events:
    #   - http:
    #       path: slack/message
    #       method: post
    #       cors: true
  github_event:
    handler: github/webhook.receive
    events:
      - http:
          path: github/webhook
          method: post
          cors: true
  github_collaborators:
    handler: github/collaborators.send
    # events:
    #   - http:
    #       path: github/collaborators
    #       method: post
    #       cors: true

resources:
  Resources:
    projectDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: repository
            AttributeType: S
          - AttributeName: slack_channelid
            AttributeType: S
        KeySchema:
          - AttributeName: repository
            KeyType: HASH
          - AttributeName: slack_channelid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PROJECT}
    userDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: github_username
            AttributeType: S
          - AttributeName: slack_userid
            AttributeType: S
        KeySchema:
          - AttributeName: github_username
            KeyType: HASH
          - AttributeName: slack_userid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}
    buildDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_BUILD}

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
